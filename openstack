#!/bin/bash

# override defaults
if [ $# -eq 0 ]; then
    echo -e "Usage: $0 <vault file>"
	echo -e "\nVault file example:"
	cat >&1 << eof
  # vault yaml file
  # remote login node
  loginhost: login.remote
  loginport: 22
  loginuser: root
  loginpass: 111111
  # remote controller
  controller: 192.168.1.1
  user1: root
  pass1: 111111
  # local forward controller:22
  local_ip: 127.0.0.1
  local_forward: 2222
  rabbitmq_port: 15672
  mysql_port: 13306
  cloudman_port: 8080
  dashboard_port: 18888
  novnc_port: 6080
eof
    echo -e "Vault file location:\n    ~/.vault/"
	exit 0
fi

. functions

showinfo=false
while getopts ":i" opt; do
    case $opt in
      i ) showinfo=true
          ;;
      ? ) echo "error input"
          exit 1;;
    esac
done
shift $(($OPTIND - 1))

conf="openstack.json"
vault="$(basename $1)"
# create conf
conf=$(python helper.py $conf genconf $vault) || exit -127
# conf created in ~/
#echo $conf

##############################################################################
# SSH Host: yourname@1.2.3.4:8022
# ssh-1                10.10.153.11:2222            192.168.8.1:22   
#
# SSH Host: root@10.10.153.11:2222
# cloudmanagement      10.10.153.11:8080            192.168.8.1:8080 
# novnc                10.10.153.11:6080            192.168.8.1:6080 
# dashboard            10.10.153.11:18888           192.168.8.1:80   
# rabbitmq             10.10.153.11:15672           192.168.8.1:5672 
# mysql                10.10.153.11:13306           192.168.8.1:3306 
##############################################################################
for x in $(python helper.py $conf info |grep -v "^SSH\ Host"|grep "^[a-zA-Z_]"|awk '{print $2}'|cut -d ":" -f 1 |uniq); do
  ip a s |grep -w "^[[:space:]]*inet $x" &>/dev/null
  [ $? -eq 0 ] || { echo -e "ERROR: IP ADDR $x not found."; exit 1; }
done

echo -e "\033[31mNOTE: If it's stuck for 30 seconds you can press Ctrl+C and rerun it.\033[0m"
echo -e "------------------------------------------------------------------------------"
python helper.py $conf info
echo -e "------------------------------------------------------------------------------"

searchprocess="$(basename $0) $1"
cloudman=$(python helper.py $conf info |grep ^cloudmanagement|awk '{print $2}')
dashboard=$(python helper.py $conf info |grep ^dashboard|awk '{print $2}')
local_forward=$(python helper.py $conf info |grep ^ssh|awk '{print $2}')

if $showinfo; then
     ps -ef |grep -E "$searchprocess|$cloudman|$local_forward" |grep -v grep
     echo -e "\nDone."
     exit 0
fi

cmdline="$0 $*"

while true; do
    # Kill the processes that is already running
    echo "searchprocess $(basename $0) $1"
	for x in $(ps -ef |grep "$searchprocess" |grep -v grep | awk '{print $2}'); do
        if [ "$x" != "$$" ]; then
              kill $x &>/dev/null
        fi
    done

    kill_ipport $cloudman
    kill_ipport $local_forward

    # ssh connect
    cat << eof1 |expect -f - &
$(python helper.py $conf expect)
eof1
    wait_ipport $local_forward
    wait_ipport $cloudman

    N=$(ps -ef |grep -E "$cloudman|$local_forward" |grep -v grep |wc -l)
	if [ $N -eq 2 ]; then
        echo -e "\nYou can browse http://$cloudman\nDone."
        detect_page_endless http://$dashboard/auth openstack
        echo "$(date) $$ rerun program: /bin/bash $cmdline"
        exec /bin/bash $cmdline
		# never reach here
	    break
	fi
	echo "...................................."
done
